libft/
├── Makefile
├── libft.h
├── src/
│   ├── ft_isalpha.c √
│   ├── ft_isdigit.c √
│   ├── ft_isalnum.c √
│   ├── ft_isascii.c √
│   ├── ft_isprint.c √
│   ├── ft_strlen.c √
│   ├── ft_memset.c √
│   ├── ft_bzero.c √
│   ├── ft_memcpy.c √
│   ├── ft_memmove.c √
│   ├── ft_strlcpy.c √
│   ├── ft_strlcat.c √
│   ├── ft_toupper.c √
│   ├── ft_tolower.c √
│   ├── ft_strchr.c √
│   ├── ft_strrchr.c √
│   ├── ft_strncmp.c √
│   ├── ft_memchr.c √
│   ├── ft_memcmp.c √
│   ├── ft_strnstr.c √
│   ├── ft_atoi.c 
│   ├── ft_calloc.c
│   ├── ft_strdup.c
│   ├── ft_substr.c
│   ├── ft_strjoin.c
│   ├── ft_strtrim.c
│   ├── ft_split.c
│   ├── ft_itoa.c
│   ├── ft_strmapi.c
│   ├── ft_striteri.c
│   ├── ft_putchar_fd.c
│   ├── ft_putstr_fd.c
│   ├── ft_putendl_fd.c   
│   ├── ft_putnbr_fd.c
├── srcb/
│   ├── ft_lstnew.c
│   ├── ft_lstadd_front.c
│   ├── ft_lstsize.c
│   ├── ft_lstlast.c
│   ├── ft_lstadd_back.c
│   ├── ft_lstdelone.c
│   ├── ft_lstclear.c
│   ├── ft_lstiter.c
│   └── ft_lstmap.c
└── obj/


### Week 1-2: Mandatory Functions (Part 1)

#### Day 1-3: Character Classification Functions
- **Functions**: `ft_isalpha`, `ft_isdigit`, `ft_isalnum`, `ft_isascii`, `ft_isprint`
- **Resources**:
  - [ctype.h man page](https://man7.org/linux/man-pages/man3/ctype.3.html)
  - [GeeksforGeeks - Character Functions in C](https://www.geeksforgeeks.org/character-functions-in-c-with-examples/)

#### Day 4-6: String Length and Memory Functions (Part 1)
- **Functions**: `ft_strlen`, `ft_memset`, `ft_bzero`, `ft_memcpy`, `ft_memmove`
- **Resources**:
  - [string.h man page](https://man7.org/linux/man-pages/man3/string.3.html)
  - [GeeksforGeeks - String Functions in C](https://www.geeksforgeeks.org/string-functions-in-c-with-examples/)

### Week 3-4: Mandatory Functions (Part 2)

#### Day 7-9: Advanced String Functions (Part 1)
- **Functions**: `ft_strlcpy`, `ft_strlcat`, `ft_toupper`, `ft_tolower`, `ft_strchr`, `ft_strrchr`
- **Resources**:
  - [strlcpy.c](https://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/string/strlcpy.c)
  - [strlcat.c](https://www.openbsd.org/cgi-bin/cvsweb/src/lib/libc/string/strlcat.c)
  - [GeeksforGeeks - String Functions in C](https://www.geeksforgeeks.org/string-functions-in-c-with-examples/)

#### Day 10-12: String Comparison and Memory Functions (Part 2)
- **Functions**: `ft_strncmp`, `ft_memchr`, `ft_memcmp`, `ft_strnstr`
- **Resources**:
  - [string.h man page](https://man7.org/linux/man-pages/man3/string.3.html)
  - [GeeksforGeeks - String Functions in C](https://www.geeksforgeeks.org/string-functions-in-c-with-examples/)

#### Day 13-15: Memory Allocation and String Duplication
- **Functions**: `ft_calloc`, `ft_strdup`
- **Resources**:
  - [stdlib.h man page](https://man7.org/linux/man-pages/man3/stdlib.3.html)
  - [GeeksforGeeks - Memory Allocation in C](https://www.geeksforgeeks.org/dynamic-memory-allocation-in-c-using-malloc-calloc-free-and-realloc/)

### Week 5-6: Additional Functions

#### Day 16-18: String Manipulation Functions (Part 1)
- **Functions**: `ft_substr`, `ft_strjoin`, `ft_strtrim`
- **Resources**:
  - [GeeksforGeeks - String Functions in C](https://www.geeksforgeeks.org/string-functions-in-c-with-examples/)
  - [C String Manipulation](https://www.tutorialspoint.com/cprogramming/c_strings.htm)

#### Day 19-21: String Manipulation Functions (Part 2)
- **Functions**: `ft_split`, `ft_itoa`, `ft_strmapi`, `ft_striteri`
- **Resources**:
  - [GeeksforGeeks - String Functions in C](https://www.geeksforgeeks.org/string-functions-in-c-with-examples/)
  - [C String Manipulation](https://www.tutorialspoint.com/cprogramming/c_strings.htm)

### Week 7: Output Functions

#### Day 22-24: Output Functions
- **Functions**: `ft_putchar_fd`, `ft_putstr_fd`, `ft_putendl_fd`, `ft_putnbr_fd`
- **Resources**:
  - [unistd.h man page](https://man7.org/linux/man-pages/man2/write.2.html)
  - [GeeksforGeeks - File I/O in C](https://www.geeksforgeeks.org/file-handling-c-programs/)

### Week 8: Bonus Part - Linked List Functions

#### Day 25-27: Linked List Functions (Part 1)
- **Functions**: `ft_lstnew`, `ft_lstadd_front`, `ft_lstsize`, `ft_lstlast`, `ft_lstadd_back`
- **Resources**:
  - [GeeksforGeeks - Linked List in C](https://www.geeksforgeeks.org/linked-list-set-1-introduction/)
  - [TutorialsPoint - Linked List in C](https://www.tutorialspoint.com/data_structures_algorithms/linked_list_program_in_c.htm)

#### Day 28-30: Linked List Functions (Part 2)
- **Functions**: `ft_lstdelone`, `ft_lstclear`, `ft_lstiter`, `ft_lstmap`
- **Resources**:
  - [GeeksforGeeks - Linked List in C](https://www.geeksforgeeks.org/linked-list-set-1-introduction/)
  - [TutorialsPoint - Linked List in C](https://www.tutorialspoint.com/data_structures_algorithms/linked_list_program_in_c.htm)

### Week 9: Review and Testing

#### Day 31-33: Review and Optimization
- Review all functions for correctness and efficiency.
- Optimize any functions that could be improved.
- **Resources**:
  - [Code Review Best Practices](https://www.perforce.com/blog/qac/what-code-review-and-why-it-important)
  - [Optimizing C Code](https://www.geeksforgeeks.org/optimizing-c-code/)

#### Day 34: Testing
- Write comprehensive tests for all functions.
- Ensure all tests pass.
- **Resources**:
  - [Unit Testing in C](https://www.geeksforgeeks.org/unit-testing-c-programs/)
  - [CUnit - A Unit Testing Framework for C](http://cunit.sourceforge.net/)

#### Day 35: Final Review and Submission
- Final review of all functions and tests.
- Ensure everything is working correctly.
- Submit your project.

### Additional Tips

1. **Understand the Requirements**: Make sure you fully understand the requirements for each function. Read the man pages for the standard library functions to get a clear idea of what each function should do.

2. **Write Tests**: Write tests for each function as you implement it. This will help you catch errors early and ensure your functions work as expected.

3. **Code Review**: Regularly review your code for readability and efficiency. Refactor if necessary.

4. **Use Resources**: Utilize online resources, forums, and your peers for help. The 42 community is a great place to ask questions and get feedback.

5. **Practice**: The more you practice, the better you'll get. Don't be afraid to make mistakes and learn from them.
